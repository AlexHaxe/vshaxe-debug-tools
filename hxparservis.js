// Generated by Haxe 3.4.0
if (typeof process !== "undefined") if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");

(function ($hx_exports) { "use strict";
var VisContentProvider = function(hxparserPath) {
	this._onDidChange = new vscode_EventEmitter();
	this.hxparserPath = hxparserPath;
	this.onDidChange = this._onDidChange.event;
};
VisContentProvider.__name__ = true;
VisContentProvider.prototype = {
	update: function(uri) {
		this._onDidChange.fire(uri);
	}
	,provideTextDocumentContent: function(uri,token) {
		var _gthis = this;
		var editor = Vscode.window.activeTextEditor;
		if(editor.document.languageId != "haxe") {
			return "Not a Haxe source file";
		}
		return new Promise(function(resolve,reject) {
			var tmpFile = js_node_Os.tmpdir() + "/hxparservis";
			var tmp = editor.document.getText();
			js_node_Fs.writeFile(tmpFile,tmp,function(err) {
				if(err != null) {
					reject(err);
					return;
				}
				var data = "";
				var cp = js_node_ChildProcess.spawn(_gthis.hxparserPath,["--json",tmpFile]);
				cp.stdout.on("data",function(s) {
					data += s;
				});
				cp.on("close",function(code,_) {
					if(code != 0) {
						reject("hxparser exited with code " + code);
						return;
					}
					var data1 = data.indexOf("]\r\nParsed") + 1;
					data = data.substring(0,data1);
					var html;
					try {
						html = Vis.vis(editor.document.uri.toString(),data);
					} catch( e ) {
						html = "<p>Error while visualizing: " + Std.string(e) + "</p><pre>" + StringTools.htmlEscape(data) + "</pre>";
					}
					resolve(html);
				});
			});
		});
	}
};
var Main = function() { };
Main.__name__ = true;
Main.activate = $hx_exports["activate"] = function(context) {
	var visUri = vscode_Uri.parse("hxparservis://authority/hxparservis");
	var hxparserPath = Vscode.workspace.getConfiguration("hxparservis").get("path","hxparser");
	var provider = new VisContentProvider(hxparserPath);
	context.subscriptions.push(Vscode.workspace.registerTextDocumentContentProvider("hxparservis",provider));
	context.subscriptions.push(Vscode.workspace.onDidChangeTextDocument(function(e) {
		if(e.document == Vscode.window.activeTextEditor.document) {
			provider.update(visUri);
		}
	}));
	context.subscriptions.push(Vscode.window.onDidChangeTextEditorSelection(function(e1) {
		if(e1.textEditor == Vscode.window.activeTextEditor) {
			provider.update(visUri);
		}
	}));
	context.subscriptions.push(Vscode.commands.registerCommand("hxparservis.visualize",function() {
		Vscode.commands.executeCommand("vscode.previewHtml",visUri,vscode__$ViewColumn_ViewColumn_$Impl_$.Two,"hxparser visualization").then(null,function(error) {
			Vscode.window.showErrorMessage(error);
		});
		return;
	}));
	var highlightDecoration = Vscode.window.createTextEditorDecorationType({ backgroundColor : "rgba(255,255,0,0.3)"});
	context.subscriptions.push(Vscode.commands.registerCommand("hxparservis.reveal",function(uri,start,end) {
		haxe_Log.trace(uri,{ fileName : "Main.hx", lineNumber : 91, className : "Main", methodName : "activate", customParams : [start,end]});
		var _g = 0;
		var _g1 = Vscode.window.visibleTextEditors;
		while(_g < _g1.length) {
			var editor = _g1[_g];
			++_g;
			if(editor.document.uri.toString() == uri) {
				var range = new vscode_Range(editor.document.positionAt(start),editor.document.positionAt(end));
				editor.revealRange(range,vscode__$TextEditorRevealType_TextEditorRevealType_$Impl_$.InCenter);
				editor.setDecorations(highlightDecoration,[range]);
			}
		}
	}));
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
var TreeKind = { __ename__ : true, __constructs__ : ["Node","Token"] };
TreeKind.Node = function(name,children) { var $x = ["Node",0,name,children]; $x.__enum__ = TreeKind; return $x; };
TreeKind.Token = function(token,trivia) { var $x = ["Token",1,token,trivia]; $x.__enum__ = TreeKind; return $x; };
var Vis = function() { };
Vis.__name__ = true;
Vis.encodeUri = function(s) {
	return encodeURI(s);
};
Vis.vis = function(uri,input) {
	var convertTrivia = function(t) {
		return { text : t.token, start : t.start, end : t.end};
	};
	var loop = null;
	loop = function(t1) {
		if(t1.name == "token") {
			var tok = t1;
			var trivia = tok.trivia == null ? [] : tok.trivia.map(convertTrivia);
			return { kind : TreeKind.Token(tok.token,trivia), start : tok.start, end : tok.end};
		} else {
			var tok1 = t1;
			var start = -1;
			var end = -1;
			var children = [];
			if(tok1.sub != null) {
				var _g = 0;
				var _g1 = tok1.sub;
				while(_g < _g1.length) {
					var elem = _g1[_g];
					++_g;
					var t2 = loop(elem);
					children.push(t2);
					if(start == -1 || t2.start < start) {
						start = t2.start;
					}
					if(end == -1 || t2.end > end) {
						end = t2.end;
					}
				}
			}
			return { kind : TreeKind.Node(tok1.name,children), start : start, end : end};
		}
	};
	var loop1 = loop;
	var tree = loop1(JSON.parse(input)[0]);
	var posStr = function(t3) {
		return "[" + t3.start + ".." + t3.end + ")";
	};
	var mkLink = function(start1,end1) {
		return "command:hxparservis.reveal?" + JSON.stringify([uri,start1,end1]);
	};
	var toHtml = null;
	toHtml = function(tree1,indent) {
		var _g2 = tree1.kind;
		switch(_g2[1]) {
		case 0:
			var children1 = _g2[3];
			var name = _g2[2];
			var link = mkLink(tree1.start,tree1.end);
			var parts = [indent + ("<a class=\"node\" href=\"" + encodeURI(link) + "\">") + StringTools.htmlEscape(name) + " " + posStr(tree1) + "</a><br>"];
			if(children1.length > 0) {
				parts.push(indent + "<ul>");
				var _g3 = 0;
				while(_g3 < children1.length) {
					var child = children1[_g3];
					++_g3;
					parts.push(indent + ("\t<li>\n" + toHtml(child,indent + "\t\t") + "\n" + indent + "</li>"));
				}
				parts.push(indent + "</ul>");
			}
			return parts.join("\n");
		case 1:
			var trivia1 = _g2[3];
			var token = _g2[2];
			var link1 = mkLink(tree1.start,tree1.end);
			var parts1 = [indent + ("<a class=\"token\" href=\"" + encodeURI(link1) + "\">") + StringTools.htmlEscape(token) + " " + posStr(tree1) + "</a><br>"];
			haxe_Log.trace(parts1.join(""),{ fileName : "Vis.hx", lineNumber : 96, className : "Vis", methodName : "vis"});
			if(trivia1.length > 0) {
				parts1.push(indent + "<ul>");
				var _g4 = 0;
				while(_g4 < trivia1.length) {
					var trivia2 = trivia1[_g4];
					++_g4;
					var link2 = mkLink(trivia2.start,trivia2.end);
					parts1.push(indent + ("\t<li>\n<a href=\"" + encodeURI(link2) + "\"><pre class=\"trivia\">" + StringTools.htmlEscape(JSON.stringify(trivia2.text)) + " " + posStr(trivia2) + "</pre></a>\n" + indent + "</li>"));
				}
				parts1.push(indent + "</ul>");
			}
			return parts1.join("\n");
		}
	};
	var toHtml1 = toHtml;
	var html = toHtml1(tree,"");
	var style = "<style>\r\n        a {\r\n            text-decoration: none;\r\n        }\r\n        .node {\r\n            color: green;\r\n        }\r\n        .token {\r\n            color: dodgerblue;\r\n        }\r\n        .trivia {\r\n            color: crimson;\r\n        }\r\n        ul {\r\n            padding-left: 1.5em;\r\n        }\r\n        pre {\r\n            margin: 0;\r\n        }\r\n        </style>";
	html = style + html;
	return html;
};
var Vscode = require("vscode");
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Os = require("os");
var js_node_buffer_Buffer = require("buffer").Buffer;
var vscode_EventEmitter = require("vscode").EventEmitter;
var vscode_Range = require("vscode").Range;
var vscode__$TextEditorRevealType_TextEditorRevealType_$Impl_$ = require("vscode").TextEditorRevealType;
var vscode_Uri = require("vscode").Uri;
var vscode__$ViewColumn_ViewColumn_$Impl_$ = require("vscode").ViewColumn;
String.__name__ = true;
Array.__name__ = true;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);

//# sourceMappingURL=hxparservis.js.map