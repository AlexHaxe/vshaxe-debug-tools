// Generated by Haxe 3.4.0
if (typeof process !== "undefined") if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");

(function ($hx_exports) { "use strict";
var VisContentProvider = function(hxparserPath) {
	this._onDidChange = new vscode_EventEmitter();
	this.hxparserPath = hxparserPath;
	this.onDidChange = this._onDidChange.event;
};
VisContentProvider.__name__ = true;
VisContentProvider.prototype = {
	update: function(uri) {
		this._onDidChange.fire(uri);
	}
	,highlightNode: function(pos) {
		console.log("TODO: look for node at " + pos);
	}
	,provideTextDocumentContent: function(uri,token) {
		var _gthis = this;
		var editor = Vscode.window.activeTextEditor;
		if(editor.document.languageId != "haxe") {
			return "Not a Haxe source file";
		}
		return new Promise(function(resolve,reject) {
			var src = editor.document.getText();
			var data = "";
			var cp = js_node_ChildProcess.spawn(_gthis.hxparserPath,["--json","<stdin>"]);
			cp.stdin.end(src);
			cp.stderr.on("data",function(s) {
				data += s;
			});
			cp.on("close",function(code,_) {
				if(code != 0) {
					reject("hxparser exited with code " + code);
					return;
				}
				var html;
				try {
					html = Vis.vis(editor.document.uri.toString(),data);
				} catch( e ) {
					html = "<p>Error while visualizing: " + Std.string(e) + "</p><pre>" + StringTools.htmlEscape(data) + "</pre>";
				}
				resolve(html);
			});
		});
	}
};
var Main = function() { };
Main.__name__ = true;
Main.activate = $hx_exports["activate"] = function(context) {
	var visUri = vscode_Uri.parse("hxparservis://authority/hxparservis");
	var hxparserPath = Vscode.workspace.getConfiguration("hxparservis").get("path","hxparser");
	var provider = new VisContentProvider(hxparserPath);
	var highlightDecoration = Vscode.window.createTextEditorDecorationType({ borderWidth : "1px", borderStyle : "solid", borderColor : "rgba(255,255,0,0.3)", backgroundColor : "rgba(255,255,0,0.3)"});
	context.subscriptions.push(highlightDecoration);
	context.subscriptions.push(Vscode.workspace.registerTextDocumentContentProvider("hxparservis",provider));
	context.subscriptions.push(Vscode.workspace.onDidChangeTextDocument(function(e) {
		if(e.document == Vscode.window.activeTextEditor.document) {
			Vscode.window.activeTextEditor.setDecorations(highlightDecoration,[]);
			provider.update(visUri);
		}
	}));
	context.subscriptions.push(Vscode.window.onDidChangeTextEditorSelection(function(e1) {
		if(e1.textEditor == Vscode.window.activeTextEditor) {
			var tmp = e1.textEditor.document.offsetAt(e1.textEditor.selection.anchor);
			provider.highlightNode(tmp);
		}
	}));
	context.subscriptions.push(Vscode.commands.registerCommand("hxparservis.visualize",function() {
		Vscode.commands.executeCommand("vscode.previewHtml",visUri,vscode__$ViewColumn_ViewColumn_$Impl_$.Two,"hxparser visualization").then(null,function(error) {
			Vscode.window.showErrorMessage(error);
		});
		return;
	}));
	context.subscriptions.push(Vscode.commands.registerCommand("hxparservis.reveal",function(uri,start,end) {
		var _g = 0;
		var _g1 = Vscode.window.visibleTextEditors;
		while(_g < _g1.length) {
			var editor = _g1[_g];
			++_g;
			if(editor.document.uri.toString() == uri) {
				var range = new vscode_Range(editor.document.positionAt(start),editor.document.positionAt(end));
				editor.revealRange(range,vscode__$TextEditorRevealType_TextEditorRevealType_$Impl_$.InCenter);
				editor.setDecorations(highlightDecoration,[range]);
			}
		}
	}));
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
var TreeKind = { __ename__ : true, __constructs__ : ["Node","Token"] };
TreeKind.Node = function(name,children) { var $x = ["Node",0,name,children]; $x.__enum__ = TreeKind; return $x; };
TreeKind.Token = function(token,trivia) { var $x = ["Token",1,token,trivia]; $x.__enum__ = TreeKind; return $x; };
var Vis = function() { };
Vis.__name__ = true;
Vis.encodeUri = function(s) {
	return encodeURI(s);
};
Vis.vis = function(uri,input) {
	var convertTrivia = function(t) {
		return { text : t.token, start : t.start, end : t.end};
	};
	var loop = null;
	loop = function(t1) {
		if(t1.name == "token") {
			var tok = t1;
			var trivia = tok.trivia == null ? [] : tok.trivia.map(convertTrivia);
			return { kind : TreeKind.Token(tok.token,trivia), start : tok.start, end : tok.end};
		} else {
			var tok1 = t1;
			var start = -1;
			var end = -1;
			var children = [];
			if(tok1.sub != null) {
				var _g = 0;
				var _g1 = tok1.sub;
				while(_g < _g1.length) {
					var elem = _g1[_g];
					++_g;
					var t2 = loop(elem);
					children.push(t2);
					if(start == -1 || t2.start < start) {
						start = t2.start;
					}
					if(end == -1 || t2.end > end) {
						end = t2.end;
					}
				}
			}
			return { kind : TreeKind.Node(tok1.name,children), start : start, end : end};
		}
	};
	var loop1 = loop;
	var tree = loop1(JSON.parse(input));
	var posStr = function(t3) {
		return "[" + t3.start + ".." + t3.end + ")";
	};
	var mkLink = function(start1,end1) {
		return "command:hxparservis.reveal?" + JSON.stringify([uri,start1,end1]);
	};
	var toHtml = null;
	toHtml = function(tree1,indent) {
		var _g2 = tree1.kind;
		switch(_g2[1]) {
		case 0:
			var children1 = _g2[3];
			var name = _g2[2];
			var link = mkLink(tree1.start,tree1.end);
			var parts = [indent + ("<a class=\"node\" href=\"" + encodeURI(link) + "\">") + StringTools.htmlEscape(name) + " " + posStr(tree1) + "</a><br>"];
			if(children1.length > 0) {
				parts.push(indent + "<ul class='collapsibleList'>");
				var _g3 = 0;
				while(_g3 < children1.length) {
					var child = children1[_g3];
					++_g3;
					parts.push(indent + ("\t<li><span class=\"button\"><span/>\n" + toHtml(child,indent + "\t\t") + "\n" + indent + "</li>"));
				}
				parts.push(indent + "</ul>");
			}
			return parts.join("\n");
		case 1:
			var trivia1 = _g2[3];
			var token = _g2[2];
			var link1 = mkLink(tree1.start,tree1.end);
			var parts1 = [indent + ("<a class=\"token\" href=\"" + encodeURI(link1) + "\">") + StringTools.htmlEscape(token) + " " + posStr(tree1) + "</a><br>"];
			if(trivia1.length > 0) {
				parts1.push(indent + "<ul>");
				var _g4 = 0;
				while(_g4 < trivia1.length) {
					var trivia2 = trivia1[_g4];
					++_g4;
					var link2 = mkLink(trivia2.start,trivia2.end);
					parts1.push(indent + ("\t<li>\n<a href=\"" + encodeURI(link2) + "\"><pre class=\"trivia\">" + StringTools.htmlEscape(JSON.stringify(trivia2.text)) + " " + posStr(trivia2) + "</pre></a>\n" + indent + "</li>"));
				}
				parts1.push(indent + "</ul>");
			}
			return parts1.join("\n");
		}
	};
	var toHtml1 = toHtml;
	return "<html>\r\n                <header>\r\n                    <style>\r\n                        " + "a {\r\n  text-decoration: none;\r\n}\r\n\r\n.node {\r\n  color: green;\r\n}\r\n\r\n.token {\r\n  color: dodgerblue;\r\n}\r\n\r\n.trivia {\r\n  color: crimson;\r\n}\r\n\r\nul {\r\n  padding-left: 1.5em;\r\n}\r\n\r\npre {\r\n  margin: 0;\r\n}\r\n\r\n.collapsibleList li {\r\n  list-style-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='%23E8E8E8' d='M11 10H5.344L11 4.414V10z'/%3E%3C/svg%3E\");\r\n  \r\n}\r\n\r\nli.collapsibleListOpen {\r\n  list-style-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='%23E8E8E8' d='M11 10H5.344L11 4.414V10z'/%3E%3C/svg%3E\");\r\n  \r\n}\r\n\r\nli.collapsibleListClosed {\r\n  list-style-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='%23E8E8E8' d='M6 4v8l4-4-4-4zm1 2.414L8.586 8 7 9.586V6.414z'/%3E%3C/svg%3E\");\r\n}" + "\r\n                    </style>\r\n                    <script>\r\n                        " + "/*\r\n\r\nCollapsibleLists.js\r\n\r\nAn object allowing lists to dynamically expand and collapse\r\n\r\nCreated by Stephen Morley - http://code.stephenmorley.org/ - and released under\r\nthe terms of the CC0 1.0 Universal legal code:\r\n\r\nhttp://creativecommons.org/publicdomain/zero/1.0/legalcode\r\n\r\n*/\r\n\r\n// create the CollapsibleLists object\r\nvar CollapsibleLists =\r\n    new function () {\r\n\r\n        /* Makes all lists with the class 'collapsibleList' collapsible. The\r\n        * parameter is:\r\n        *\r\n        * doNotRecurse - true if sub-lists should not be made collapsible\r\n        */\r\n        this.apply = function (doNotRecurse) {\r\n            // loop over the unordered lists\r\n            var uls = document.getElementsByTagName('ul');\r\n            for (var index = 0; index < uls.length; index++) {\r\n                // check whether this list should be made collapsible\r\n                if (uls[index].className.match(/(^| )collapsibleList( |$)/)) {\r\n                    // make this list collapsible\r\n                    this.applyTo(uls[index], true);\r\n\r\n                    // check whether sub-lists should also be made collapsible\r\n                    if (!doNotRecurse) {\r\n                        // add the collapsibleList class to the sub-lists\r\n                        var subUls = uls[index].getElementsByTagName('ul');\r\n                        for (var subIndex = 0; subIndex < subUls.length; subIndex++) {\r\n                            subUls[subIndex].className += ' collapsibleList';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /* Makes the specified list collapsible. The parameters are:\r\n        *\r\n        * node         - the list element\r\n        * doNotRecurse - true if sub-lists should not be made collapsible\r\n        */\r\n        this.applyTo = function (node, doNotRecurse) {\r\n            // loop over the list items within this node\r\n            var lis = node.getElementsByTagName('li');\r\n            for (var index = 0; index < lis.length; index++) {\r\n                // check whether this list item should be collapsible\r\n                if (!doNotRecurse || node == lis[index].parentNode) {\r\n                    // prevent text from being selected unintentionally\r\n                    if (lis[index].addEventListener) {\r\n                        lis[index].addEventListener(\r\n                            'mousedown', function (e) { e.preventDefault(); }, false);\r\n                    } else {\r\n                        lis[index].attachEvent(\r\n                            'onselectstart', function () { event.returnValue = false; });\r\n                    }\r\n\r\n                    // add the click listener\r\n                    if (lis[index].addEventListener) {\r\n                        lis[index].addEventListener(\r\n                            'click', createClickListener(lis[index]), false);\r\n                    } else {\r\n                        lis[index].attachEvent(\r\n                            'onclick', createClickListener(lis[index]));\r\n                    }\r\n\r\n                    // close the unordered lists within this list item\r\n                    // toggle(lis[index]);\r\n                }\r\n            }\r\n        };\r\n\r\n        /* Returns a function that toggles the display status of any unordered\r\n        * list elements within the specified node. The parameter is:\r\n        *\r\n        * node - the node containing the unordered list elements\r\n        */\r\n        function createClickListener(node) {\r\n            // return the function\r\n            return function (e) {\r\n                // ensure the event object is defined\r\n                if (!e) e = window.event;\r\n\r\n                // find the list item containing the target of the event\r\n                var li = (e.target ? e.target : e.srcElement);\r\n                while (li.nodeName != 'LI') li = li.parentNode;\r\n\r\n                // toggle the state of the node if it was the target of the event\r\n                if (li == node) toggle(node);\r\n            };\r\n        }\r\n\r\n        /* Opens or closes the unordered list elements directly within the\r\n        * specified node. The parameter is:\r\n        *\r\n        * node - the node containing the unordered list elements\r\n        */\r\n        function toggle(node) {\r\n            // determine whether to open or close the unordered lists\r\n            var open = node.className.match(/(^| )collapsibleListClosed( |$)/);\r\n\r\n            // loop over the unordered list elements with the node\r\n            var uls = node.getElementsByTagName('ul');\r\n            for (var index = 0; index < uls.length; index++) {\r\n                // find the parent list item of this unordered list\r\n                var li = uls[index];\r\n                while (li.nodeName != 'LI') li = li.parentNode;\r\n\r\n                // style the unordered list if it is directly within this node\r\n                if (li == node) uls[index].style.display = (open ? 'block' : 'none');\r\n            }\r\n\r\n            // remove the current class from the node\r\n            node.className =\r\n                node.className.replace(\r\n                    /(^| )collapsibleList(Open|Closed)( |$)/, '');\r\n\r\n            // if the node contains unordered lists, set its class\r\n            if (uls.length > 0) {\r\n                node.className += ' collapsibleList' + (open ? 'Open' : 'Closed');\r\n            }\r\n        }\r\n    }();\r\n\r\nwindow.onload = function () {\r\n    CollapsibleLists.apply();\r\n    var src = $('img#logo').attr('src');\r\n    $('img.logo').attr('src', src);\r\n};" + "\r\n                    </script>\r\n                </header>\r\n                <body>\r\n                    " + toHtml1(tree,"") + "\r\n                </body>\r\n            </html>";
};
var Vscode = require("vscode");
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_ChildProcess = require("child_process");
var js_node_buffer_Buffer = require("buffer").Buffer;
var vscode_EventEmitter = require("vscode").EventEmitter;
var vscode_Range = require("vscode").Range;
var vscode__$TextEditorRevealType_TextEditorRevealType_$Impl_$ = require("vscode").TextEditorRevealType;
var vscode_Uri = require("vscode").Uri;
var vscode__$ViewColumn_ViewColumn_$Impl_$ = require("vscode").ViewColumn;
String.__name__ = true;
Array.__name__ = true;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);

//# sourceMappingURL=hxparservis.js.map